<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<!DOCTYPE document
[
<!ENTITY root-path   '..'> <!-- The path to the incubator root -->
]>

<document>
  <properties>
    <atom url="http://mail-archives.apache.org/mod_mbox/incubator-general/?format=atom">general@incubator.apache.org Archives</atom>
    <title>Apache Incubator: Java-specific Release Management Issues (DRAFT)</title>
  </properties>
  <body>
    <section id='intro'><title>Java-specific Release Management Issues (DRAFT)</title>
          <section id='TOC'><title>Contents</title><toc/></section>
    </section>
    
    <!--
    TODO:                
        Maven: 
          Stop ignoring the elephant
       -->

    <section id='release-guidelines'><title>Release Guidelines</title>
    	<p>
Guidelines change much more frequently than policy. Release managers should follow the appropriate
lists. Subscribe to:
    	</p>
        <ul>
            <li><em>repository</em> for matters related to the maven repositories</li>
        </ul>
    </section>
    
    <section id='best-practice'><title>Best Practice</title>
        <section id='best-practice-jars'><title>Jars</title>
            <ul>
                <li><code>META-INF</code>
                    <ul>
                        <li>
    Must include <a href='#license'>LICENSE</a> and <a href='#NOTICE'>NOTICE</a>. 
    Note <a href='#distributing-jars'>this</a>
                        </li>
                        <li>
    Should include a standards compliant MANIFEST. Note <a href='#jar-manifest'>this</a>.
                        </li>
                    </ul>
                </li>
            </ul>
        </section>
        <section id='best-practice-naming'><title>Artifact Naming</title>
        	<p>
            TODO: should include apache in the title (gives trademark protection against different jars 
            with the same name)
        	</p>
        </section>
        <section id='best-practice-formats'><title>Compression Formats</title>
            <p>
Note (TODO link) that there are known compatibility issues when using certain tar programs. 
(TODO Saris verses GNU tar)
It is recommend that project that use Ant or Maven as build tools, use these tools to create
the archives since these implementations work well across a range of platforms. 
It is recommended that project which do not use these tools consider shipping the
*nix package as a bz2 archive.
            </p>
        </section>
        <section id='best-practice-source-build'><title>Source Package Build</title>
            <p>
Build instructions should give supported version numbers for build tools (for example, maven and ant).
            </p>
        </section>
        <section id='best-practice-distributing-libraries'><title>Distributing Libraries</title>
            <p>
TODO: Discussion on the merits of distributing dependent jars. This should be a link to the notes section
            </p>
        </section>
        
        <section id='best-practice-dependencies'><title>Dependencies</title>
        	<p>
As well as libraries, projects often have more subtle dependencies.
Many languages (for example Java and Perl) have different versions.
It is important that the versions of a language upon which a project
will run are clearly documented. The <a href='TODO:'>release notes</a>
are a typical location for this information. <a href='TODO:link to note on '>Note</a>
that Java also includes the version used to build in the MANIFEST. 
        	</p>
        </section>
        <section id='best-practice-maven'><title>Maven</title>
        	<p>
<a href='http://maven.apache.org'>Apache Maven</a> is a tool used by many podlings.
TODO: improve preamble
        	</p>
        	<p>
It is best to use the <code>groupId</code> and <code>artifactId</code> that will
be used upon graduation. The version should include <code>incubating</code> 
(or <code>incubator</code>) to ensure that the artifacts created comply with Incubator
<a href="&root-path;/incubation/Incubation_Policy.html#Releases">release policy</a>.
        	</p>
        	<p>
For example
        	</p>
<code><pre>
	&lt;groupId&gt;org.apache.wicket&lt;/groupid&gt;
	&lt;artifactId&gt;wicket-parent&lt;/artifactId&gt;
	&lt;version&gt;1.3-incubating-SNAPSHOT&lt;/version&gt;
</pre></code>
        </section>
    </section>
    <section id='notes'><title>Notes</title>
        <section id='distributing-jars'><title>Distributing Jars</title>
            <p>
            TODO: link to infrastructure
            </p>
            <p>
Jars are just another form of binary package. If they are likely to be distributed
(for example, through the Apache Repository) then they must adhere to the same policy
as other binary packages. In particular, LICENSE and NOTICE files must be distributed.
            </p>
            <p>
It is convenient to include these with the META-INF directory. This can be done easily either 
either with Ant or Maven. TODO: move examples here from jakarta commons releases.
            </p>
        </section>
        <section id='jar-manifest'><title>Jar MANIFEST</title>
            <p>
TODO
Lots of projects get this wrong and most tools, by default, produce substandard manifests.
Offer some guidance on values
TODO: Add how to create a specification compliant MANIFEST 
http://jakarta.apache.org/commons/releases/prepare.html#checkjarmanifest
            </p>
            <p>
Maven 1 produces a minimal MANIFEST. This should be augmented with the 
recommended by adding appropriate 
<a href='http://maven.apache.org/maven-1.x/plugins/jar/properties.html'>properties</a>
to the <code>project.properties</code> file.
            </p>
            <p>
Maven 2 produces a much better manifest provided that the POM is reasonably full.
It does not, by default, include some recommended manifest entries. It is recommended that POM should be
<a href='http://maven.apache.org/plugins/maven-jar-plugin/examples/manifest-customization.html'>customized</a>
so that it includes the missing recommended entries.
            </p>
        </section>
        <section id='note-compatibility-checkers'><title>Compatibility Checkers</title>
			<p>
Some tools used by Apache projects:
			</p>
			<ul>
				<li>Java
					<ul>
						<li><a href='http://clirr.sourceforge.net//'>Clirr</a> works on binaries</li>
						<li><a href='http://jdiff.sourceforge.net/'>JDiff</a> uses sources</li>
					</ul>
				</li>
			</ul>
        </section>
        <section id='notes-change-log'><title>Change Logs</title>
        	<p>
Maven can be used to generate a change log as part of the project documentation.
        	</p>
        </section>
        <section id='notes-on-java-version'><title>On Java Versions</title>
        	<p>
Indicating supported versions for dependencies is 
<a href='#best-practice-dependencies'>important</a>. The minimum 
(and - where appropriate - maximum)  Java version need to be clearly documented
in the release. This information should be included in a README or the RELEASE NOTES.
        	</p>
        	<p>
 Users often expect the minimum version supported to be the one listed in the MANIFEST.
 There are also good reasons for releases to be compiled with the minimum version 
 of Java supported by the release. This is the easiest way to ensure that the release
 will work as expected on that version. This will ensure that the version in the MANIFEST
 is as expected. 
 			</p>
 			<p>
If the version in the MANIFEST cannot reflect the minimum support version (see below) 
then it is recommended that the flowing additional entries are added to MANIFEST.
 			</p>
 			<p>
The usual reason for need to use a more modern Java version is to support
optional classes which require features present only in the new version.
			</p>
			<p>
The approach which requires the least configuration is to adopt a split compilation
strategy. The release manager installs two separate Java versions. The build
script supports optional parameterization allowing the optional code to be compiled with 
a second JSDK. It is recommended that the build scrip includes clear indications
that a second JSDK has been detected.
 			</p>
 			<p>
The alternative is to correctly configure a more modern JSDK to compile code
which will function correctly on another JRE. This means TODO: javac settings through 
Ant. This is not sufficient. Unfortunately the source also need to be compiled against
the appropriate version of the Java API. TODO: check where the jar has to be exactly
placed.
        	</p>
        </section>
        <section id='notes-on-line-endings'><title>On Line Endings</title>
        	<p>
Binary packages
build with <a href='http://ant.apace.org'>Ant</a> can use 
<a href='http://ant.apache.org/manual/CoreTasks/fixcrlf.html'>fixcrlf</a>.
            </p>
        </section>
        <section id='notes-on-signing-jars'><title>On Signing Jars</title>
        	<p>
Java includes a standard mechanism for signing jars. Apache uses digital
signatures to protect releases. TODO: reconsider this section.
        	</p>
        	<p>
Though there is no rule against issuing signed jars, project should educate
themselves about the potentially negative consequences of doing so.
Classloaders treat signed jars differently. In particular, packages are 
sealed against modification. Open source encourages modification. 
TODO: rephrase and check
        	</p>
        </section>
        <section id='note-standards'><title>Implementations Of Standards</title>
        	<p>
TODO: importance of accurately reporting to the user the state of an implementation
TODO: importance of complying with the reporting requirements set by the standard creator
        	</p>
        	<section id='notes-jsr'><title>JSRs</title>
        		<p>
TODO: write up http://marc.theaimsgroup.com/?l=incubator-general&amp;m=116577422312412&amp;w=2
TODO: then check with Geir
        		</p>
        	</section>
        </section>
        <section id='notes-release-candidate-java'><title>On Java Release Candidates</title>
			<p>
This section applies to any package that contains re-distributable artifacts which contain version
information but in particular binary packages of Java contain jar files. A compliant MANIFEST 
meta data file within each of these files should contain the implementation version.
These are good reasons to use the release version number as the implementation version.
This allows the exact version to be determined from just the jar.
Unfortunately, some applications expect the format to be entirely numeric (TODO: maven?)
			</p>
			<p>
This does mean that release candidates for binary packages of this type must either
be rereleased with the version number as the only change or accept that artifacts will not be 
uniquely named. Uncertainty about exact jar versions has caused nasty dependency
issues in the past.
			</p>
        </section>
    </section>

    <section id='glossary'><title>Glossary</title>
        <section id='glossary-manifest'><title>Jar MANIFEST</title>
        	<p>
Meta data, enumerating the contents of the Jar, associated with the Java Jar format.
        	</p>
            <p>
            TODO link to sun documentation
            </p>
        </section>
    </section>
  </body>
</document>

